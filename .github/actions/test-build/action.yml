name: 'Test built Windows binary'
description: 'Test built Windows binary'
inputs:
  os:
    description: 'runs-on'
    required: false
    default: 'windows-2022'
  node:
    description: 'Node version'
    required: true

runs:
  using: "composite"
  steps:

    - name: Create release folder
      if:  runner.os == 'Windows'
      shell: pwsh
      run: |
        cmd /c if not exist "lib\native\win32\ia32\${{ inputs.node }}" mkdir "lib\native\win32\ia32\${{ inputs.node }}"
        cmd /c if not exist "lib\native\win32\x64\${{ inputs.node }}" mkdir "lib\native\win32\x64\${{ inputs.node }}"
        cmd /c if not exist "lib\native\win32\arm64\${{ inputs.node }}" mkdir "lib\native\win32\arm64\${{ inputs.node }}"

    - name: Create release folder
      if:  runner.os == 'macOS'
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          try {
            const fs = require('fs')
              fs.mkdirSync('lib/native/darwin/x64/${{ inputs.node }}', { recursive: true });
              fs.mkdirSync('lib/native/darwin/arm64/${{ inputs.node }}', { recursive: true });
          } catch(err) {
            core.error("Error creating release directory")
            core.setFailed(err)
          }

    - name: Download artifacts
      if:  runner.os == 'Windows'
      uses: actions/download-artifact@v4
      with:
        path: release
        pattern: win32-edge-js-${{ inputs.node }}*

    - name: Download artifacts
      if:  runner.os == 'macOS' && inputs.os != 'macos-13'
      uses: actions/download-artifact@v4
      with:
        path: release
        pattern: darwin-arm64-edge-js-${{ inputs.node }}*

    - name: Download artifacts
      if:  runner.os == 'macOS' && inputs.os == 'macos-13'
      uses: actions/download-artifact@v4
      with:
        path: release
        pattern: darwin-x64-edge-js-${{ inputs.node }}*

    - name: List artifacts
      shell: bash
      run: ls -R release

    - name: Copy artifacts
      if:  runner.os == 'Windows'
      shell: pwsh
      run: |
        cmd /c copy /y release\win32-edge-js-${{ inputs.node }}\win32\x64\${{ inputs.node }}\edge_*.node lib\native\win32\x64\${{ inputs.node }}

    - name: Copy artifacts
      if:  runner.os == 'macOS' && inputs.os != 'macos-13'
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          try {
            const fs = require('fs')
              fs.copyFileSync('release/darwin-arm64-edge-js-${{ inputs.node }}/darwin/arm64/${{ inputs.node }}/edge_coreclr.node', 'lib/native/darwin/arm64/${{ inputs.node }}/edge_coreclr.node');
              fs.copyFileSync('release/darwin-arm64-edge-js-${{ inputs.node }}/darwin/arm64/${{ inputs.node }}/edge_nativeclr.node', 'lib/native/darwin/arm64/${{ inputs.node }}/edge_nativeclr.node');
              fs.copyFileSync('release/darwin-arm64-edge-js-${{ inputs.node }}/darwin/arm64/${{ inputs.node }}/MonoEmbedding.exe', 'lib/native/darwin/arm64/${{ inputs.node }}/MonoEmbedding.exe');
          } catch(err) {
            core.error("Error creating release directory")
            core.setFailed(err)
          }

    - name: Copy artifacts
      if:  runner.os == 'macOS' && inputs.os == 'macos-13'
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          try {
            const fs = require('fs')
              fs.copyFileSync('release/darwin-x64-edge-js-${{ inputs.node }}/darwin/x64/${{ inputs.node }}/edge_coreclr.node', 'lib/native/darwin/x64/${{ inputs.node }}/edge_coreclr.node');
              fs.copyFileSync('release/darwin-x64-edge-js-${{ inputs.node }}/darwin/x64/${{ inputs.node }}/edge_nativeclr.node', 'lib/native/darwin/x64/${{ inputs.node }}/edge_nativeclr.node');
              fs.copyFileSync('release/darwin-x64-edge-js-${{ inputs.node }}/darwin/x64/${{ inputs.node }}/MonoEmbedding.exe', 'lib/native/darwin/x64/${{ inputs.node }}/MonoEmbedding.exe');
          } catch(err) {
            core.error("Error creating release directory")
            core.setFailed(err)
          }

    - name: Setup env
      uses: ./.github/actions/setup-env
      with:
        node: ${{ inputs.node }}
        os: ${{ inputs.os }}

    - name: Check edge-js Windows pre-built files
      if:  runner.os == 'Windows'
      uses: andstor/file-existence-action@v3
      with:
        files: "lib/native/win32/${{ runner.arch }}/${{ inputs.node }}/edge_coreclr.node, lib/native/win32/${{ runner.arch }}/${{ inputs.node }}/edge_nativeclr.node"
        fail: true
        ignore_case: true

    - name: Check edge-js macOS pre-built files
      if:  runner.os == 'macOS' && inputs.os == 'macos-13'
      uses: andstor/file-existence-action@v3
      with:
        files: "lib/native/darwin/${{ runner.arch }}/${{ inputs.node }}/edge_nativeclr.node"
        fail: true
        ignore_case: true

    - name: Check edge-js macOS pre-built files
      if:  runner.os == 'macOS' && inputs.os != 'macos-13'
      uses: andstor/file-existence-action@v3
      with:
        files: "lib/native/darwin/${{ runner.arch }}/${{ inputs.node }}/edge_coreclr.node"
        fail: true
        ignore_case: true

    - name: Run .NET 4.5 tests
      # if: inputs.os != 'macos-13'
      shell: bash
      run: node tools/test.js CI

    - name: "Run .net core tests"
      shell: bash
      run: node tools/test.js CI
      env:
        EDGE_USE_CORECLR: 1

    - name: Test report
      uses: ./.github/actions/create-test-report
      with:
        node: ${{ inputs.node }}
        os: ${{ inputs.os }}
        name: 'build-tests'

    - name: publish test-summary nacOS
      if: runner.os == 'macOS'
      uses: EnricoMi/publish-unit-test-result-action/macos@v2
      with:
        check_run_annotations: 'none'
        check_name: 'test-summary node-${{ inputs.node }} ${{ inputs.os }}'
        files: "test-results.xml"
        
    - name: publish test-summary Windows
      if: runner.os == 'Windows'
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      with:
        check_run_annotations: 'none'
        check_name: 'test-summary node-${{ inputs.node }} ${{ inputs.os }}'
        files: "test-results.xml"
