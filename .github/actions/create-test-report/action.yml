name: 'Test report'
description: 'Create test report'
inputs:
  name:
    description: 'name'
    required: false
    default: 'test-results'
  node:
    description: 'Node.js version'
    required: true
  os:
    description: 'runs-on'
    required: true
  upload:
    description: 'Upload artifacts?'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:

    - name: Read mochawesome.json
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          try {
            const fs = require('fs')
            const jsonString = fs.readFileSync('mochawesome.json')
            var report = JSON.parse(jsonString);
            // let stats = {
            //     passing: report.stats.passes,
            //     skipped: report.stats.pending,
            //     failures: report.stats.failures
            // };
            core.exportVariable('test_passing', report.stats.passes);
            core.exportVariable('test_skipped', report.stats.pending); 
            core.exportVariable('test_failures', Number(report.stats.failures));
            let resultTable = [
              [{data: 'Passed ✔️', header: true}, {data: 'Failed ❌', header: true}, {data: 'Skipped ➖', header: true}],
              [`passed-${report.stats.passes}`, `${report.stats.failures}`, `${report.stats.pending}`]
            ];
            core.summary.addHeading(`Test results`, 4);
            core.summary.addTable(resultTable);
            if(Number(report.stats.failures) > 0) {
              // core.summary.addBreak();
              let failureTable = [];
              failureTable.push([{data: 'File', header: true}, {data: 'Suite', header: true}, {data: 'Test', header: true}]);
              for (const result of report.results) {
                for(const suite of result.suites) {
                    for (const test of suite.tests) {
                      if (test.fail) {
                        let file = suite.file?.replaceAll('\\', '/');
                        if(file?.startsWith('/')) {
                            file = file.substring(1);
                        }
                        failureTable.push([file, suite.title, test.title]);
                      }
                  }
                }
              }
              core.summary.addHeading(`Test failures`, 3);
              core.summary.addTable(failureTable);
            }
            core.summary.write();
            // const tableData = [
            //   [{data: 'File', header: true}, {data: 'Suite', header: true}, {data: 'Test', header: true}],
            //   ['foo.js', 'Pass ✅'],
            //   ['bar.js', 'Fail ❌'],
            //   ['test.js', 'Pass ✅']
            // ]
            // Add an HTML table
            // core.summary.addTable([tableData]);
            // core.summary.write();
           // core.notice(JSON.stringify(stats));
            // if(stats.failures > 0) {
            //   core.setFailed(`There are ${stats.failures} test failures`);
          } catch(err) {
            core.error("Error while reading or parsing mochawesome.json")
            core.setFailed(err)
          }

    - name: Output test results
      shell: bash
      run: |
        echo "#### Test results" >> $GITHUB_STEP_SUMMARY
        echo "| Passing :heavy_check_mark: | Failed :x:     | Skipped :heavy_minus_sign: |" >> $GITHUB_STEP_SUMMARY
        echo "| -------------------------- | -------------- | -------------------------- |" >> $GITHUB_STEP_SUMMARY
        echo "| $test_passing              | $test_failures | $test_skipped              |" >> $GITHUB_STEP_SUMMARY

        # echo "- Passing tests: $test_passing" >> $GITHUB_STEP_SUMMARY
        # echo "- Skipped tests: $test_skipped" >> $GITHUB_STEP_SUMMARY
        # echo "- Failed tests: $test_failures" >> $GITHUB_STEP_SUMMARY
        if [ $test_failures -gt 0 ]; then
          echo "##[error]There are $test_failures test failures"
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: ${{ inputs.upload == 'true' && success() }}
      with:
        name: ${{ inputs.name }}-${{ inputs.os }}-${{ inputs.node }}
        path: |
          test-results.xml
          mochawesome.json
          mochawesome.html
          assets/
    # - name: Create test report
    #   uses: phoenix-actions/test-reporting@v15
    #   if: success()
    #   with:
    #     name: ${{ inputs.name }}-${{ inputs.os }}-node-${{ inputs.node }}
    #     fail-on-error: true
    #     path: mochawesome.json   # Path to test results
    #     reporter: mochawesome-json 
